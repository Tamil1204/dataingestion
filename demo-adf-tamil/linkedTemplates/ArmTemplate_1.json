{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "demo-adf-tamil"
		},
		"trigger1_properties_pl_end_to_end_inc_sqldb_synapse_parameters_p_trigger_schedule": {
			"type": "string",
			"defaultValue": "trigger1"
		},
		"trigger1_properties_pl_end_to_end_inc_sqldb_synapse_parameters_ctbl_schema": {
			"type": "string",
			"defaultValue": "sqldemo"
		},
		"trigger1_properties_pl_end_to_end_inc_sqldb_synapse_parameters_ctbl_name": {
			"type": "string",
			"defaultValue": "control_table"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_mgp_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "@json(item().CopySourceSettings).sqlReaderQuery",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_mgp_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_mgp_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_fileName": {
																		"value": "@json(item().SinkObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SinkObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_fileSystem": {
																		"value": "@json(item().SinkObjectSettings).fileSystem",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "DeltaLoad",
												"activities": [
													{
														"name": "GetMaxWatermarkValue",
														"description": "Query the source object to get the max value from watermark column",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "7.0:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select max([@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}]) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"dataset": {
																"referenceName": "MetadataDrivenCopyTask_mgp_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "DeltaLoadOneObject",
														"description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "GetMaxWatermarkValue",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}] \n    where [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] > @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, \n    concat('''', json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, ''''))}\n    and [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] <= @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, \n    concat('''', activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, ''''))}",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_mgp_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_mgp_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_fileName": {
																		"value": "@{json(item().SinkObjectSettings).fileName}-@{json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue}-@{activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue}",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SinkObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_fileSystem": {
																		"value": "@json(item().SinkObjectSettings).fileSystem",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UpdateWatermarkColumnValue",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "DeltaLoadOneObject",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.0:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[UpdateWatermarkColumnValue_mgp]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"watermarkColumnStartValue": {
																	"value": {
																		"value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "linkedService2",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@json(item().CopySourceSettings).sqlReaderQuery",
															"type": "Expression"
														},
														"partitionOption": {
															"value": "@json(item().CopySourceSettings).partitionOption",
															"type": "Expression"
														},
														"partitionSettings": {
															"partitionColumnName": {
																"value": "@json(item().CopySourceSettings).partitionColumnName",
																"type": "Expression"
															},
															"partitionUpperBound": {
																"value": "@json(item().CopySourceSettings).partitionUpperBound",
																"type": "Expression"
															},
															"partitionLowerBound": {
																"value": "@json(item().CopySourceSettings).partitionLowerBound",
																"type": "Expression"
															},
															"partitionNames": "@json(item().CopySourceSettings).partitionNames"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_mgp_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SourceObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SourceObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_mgp_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_fileName": {
																"value": "@json(item().SinkObjectSettings).fileName",
																"type": "Expression"
															},
															"cw_folderPath": {
																"value": "@json(item().SinkObjectSettings).folderPath",
																"type": "Expression"
															},
															"cw_fileSystem": {
																"value": "@json(item().SinkObjectSettings).fileSystem",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_mgp_20221012"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-12T12:26:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_partition_sqldb_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.cntrl_table_qstring",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_db_any_table1",
								"type": "DatasetReference",
								"parameters": {
									"ds_schema": "schema",
									"ds_tablename": "tablename"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 6,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from ',pipeline().parameters.schemaname,'.',pipeline().parameters.tablename,' where ',replace(pipeline().parameters.watermark_where_cond,'part_value', item().his_grp_column))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sql_db_any_table1",
											"type": "DatasetReference",
											"parameters": {
												"ds_schema": "schemaname",
												"ds_tablename": "table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_parquet_any_file14",
											"type": "DatasetReference",
											"parameters": {
												"ds_folder": {
													"value": "@pipeline().parameters.folder",
													"type": "Expression"
												},
												"ds_filename": {
													"value": "@concat(pipeline().parameters.filename,'_',item().his_grp_column,'.parquet')",
													"type": "Expression"
												},
												"ds_container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"schemaname": {
						"type": "string",
						"defaultValue": "sqldemo"
					},
					"tablename": {
						"type": "string",
						"defaultValue": "control-table"
					},
					"cntrl_table_his_grp_column": {
						"type": "string",
						"defaultValue": "CONCAT(EXTRACT(YEAR  FROM BLNG_DT), EXTRACT(MONTH FROM date))"
					},
					"cntrl_table_qstring": {
						"type": "string",
						"defaultValue": " select tablename, year(date), his_grp_column, COUNT(*) CNT from schema.table"
					},
					"folder": {
						"type": "string",
						"defaultValue": "tablename/raw/history"
					},
					"filename": {
						"type": "string",
						"defaultValue": "filename without extension"
					},
					"watermark_where_cond": {
						"type": "string",
						"defaultValue": "year(date) ='part_value'"
					},
					"container": {
						"type": "string",
						"defaultValue": "sql-demo"
					}
				},
				"folder": {
					"name": "Ingestion patterns Sql db to Synapse/History"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-11T03:58:18Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqldb_adls_all_tables_incremental_seq1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from ',pipeline().parameters.ctbl_schema,'.',pipeline().parameters.ctbl_name, ' where trigger_segment=', pipeline().parameters.p_trigger_schedule,' start_run=''Y'' and load_type =''current'' and flow_sequence=1 and run_status =''N''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_synapse",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set watermark_end_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Lookup2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from ', item().source_path,'.',item().source_table,' where ',replace(replace(item().watermark_where_cond,'watermark_val',replace(item().watermark_val,'T', ' ')),'watermark_end_val',variables('watermark_end_val_wo_tz')))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_db_any_table",
											"type": "DatasetReference",
											"parameters": {
												"ds_schema": "schemaname",
												"ds_tablename": "table"
											}
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(activity('Lookup2').output,'firstRow')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('select * from ', item().source_path,'.',item().source_table,' where ',replace(replace(item().watermark_where_cond,'watermark_val',replace(item().watermark_val,'T', ' ')),'watermark_end_val',variables('watermark_end_val_wo_tz')))",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_sql_db_any_table",
														"type": "DatasetReference",
														"parameters": {
															"ds_schema": "schemaname",
															"ds_tablename": "table"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_adls_parquet_any_file",
														"type": "DatasetReference",
														"parameters": {
															"ds_folder": {
																"value": "@concat(item().target_path,'/', substring(variables('watermark_end_value'),0,4),'/', substring(variables('watermark_end_value'),5,2))",
																"type": "Expression"
															},
															"ds_filename": {
																"value": "@concat(item().dest_table,'_',replace(variables('watermark_end_value'),':','.'),'.parquet')",
																"type": "Expression"
															},
															"ds_container": {
																"value": "@item().container",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Get Metadata1",
												"type": "GetMetadata",
												"dependsOn": [
													{
														"activity": "Stored procedure update run status true",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ds_adls_parquet_any_file",
														"type": "DatasetReference",
														"parameters": {
															"ds_folder": {
																"value": "@concat(item().target_path,'/', substring(variables('watermark_end_value'),0,4),'/', substring(variables('watermark_end_value'),5,2))",
																"type": "Expression"
															},
															"ds_filename": {
																"value": "@concat(item().dest_table,'_',replace(variables('watermark_end_value'),':','.'),'.parquet')",
																"type": "Expression"
															},
															"ds_container": {
																"value": "@item().container",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"lastModified"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Stored procedure to update ADLS log",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Get Metadata1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.sp_Insert_adls_load_hist')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"filename": {
															"value": {
																"value": "@concat(item().dest_table,'_',replace(variables('watermark_end_value'),':','.'),'.parquet')",
																"type": "Expression"
															},
															"type": "String"
														},
														"folderpath": {
															"value": {
																"value": "@concat(item().target_path,'/', substring(utcnow(),0,4),'/', substring(utcnow(),5,2))",
																"type": "Expression"
															},
															"type": "String"
														},
														"lastmodified": {
															"value": {
																"value": "@activity('Get Metadata1').output.lastModified",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"processed": {
															"value": "N",
															"type": "String"
														},
														"recordcount": {
															"value": {
																"value": "@activity('Copy data1').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"schemaname": {
															"value": {
																"value": "@item().source_path",
																"type": "Expression"
															},
															"type": "String"
														},
														"tablename": {
															"value": {
																"value": "@item().source_table",
																"type": "Expression"
															},
															"type": "String"
														},
														"wm_val": {
															"value": {
																"value": "@substring(variables('watermark_end_value'),0,19)",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Stored procedure update watermark",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Stored procedure to update ADLS log",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.sp_update_wm_val')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"flow_sequence": {
															"value": "1",
															"type": "Int32"
														},
														"last_updt_date": {
															"value": {
																"value": "@utcnow()",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"load_type": {
															"value": "current",
															"type": "String"
														},
														"source_name": {
															"value": {
																"value": "@item().source_name",
																"type": "Expression"
															},
															"type": "String"
														},
														"source_table": {
															"value": {
																"value": "@item().source_table",
																"type": "Expression"
															},
															"type": "String"
														},
														"watermarkval": {
															"value": {
																"value": "@substring(variables('watermark_end_value'),0,19)",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Stored procedure update run status true",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_true')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"load_type": {
															"value": "current",
															"type": "String"
														},
														"t_sequence": {
															"value": "1",
															"type": "String"
														},
														"t_source_table": {
															"value": {
																"value": "@item().source_table",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Stored procedure update run status false",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_false')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"load_type": {
															"value": "current",
															"type": "String"
														},
														"t_sequence": {
															"value": "1",
															"type": "String"
														},
														"t_source_table": {
															"value": {
																"value": "@item().source_table",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "set_watermark_end_value",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "watermark_end_value",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set watermark_end_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "set_watermark_end_value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "watermark_end_val_wo_tz",
							"value": {
								"value": "@substring(replace(utcnow(),'T',' '),0,19)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_trigger_schedule": {
						"type": "string",
						"defaultValue": "trigger1"
					},
					"ctbl_schema": {
						"type": "string",
						"defaultValue": "sqldemo"
					},
					"ctbl_name": {
						"type": "string",
						"defaultValue": "control_table"
					}
				},
				"variables": {
					"watermark_end_value": {
						"type": "String"
					},
					"comma": {
						"type": "String",
						"defaultValue": ","
					},
					"watermark_end_val_wo_tz": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion patterns Sql db to Synapse/Incremental"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-11T04:04:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_adls_synapse_current')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Ingestion pattern dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_parquet_any_file13",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_anytable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "parameters{\n\tcols as string[]\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> source1\nDerivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nsource1 derive(last_update_tmstp = currentUTC()) ~> DerivedColumn1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tsource_table as string,\n\t\tdest_table as string,\n\t\tsource_path as string,\n\t\ttarget_path as string,\n\t\tflow_sequence as string,\n\t\trun_status as string,\n\t\tqstring as string,\n\t\twatermark_col as string,\n\t\twatermark_val as string,\n\t\tkey_column as string,\n\t\tsource_name as string,\n\t\tload_type as string,\n\t\tstart_run as string,\n\t\tsource_id as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:($cols),\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_adls_synapse_history')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Ingestion pattern dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_parquet_any_file12",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_anytable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "parameters{\n\tdf_schema as string,\n\tdf_table as string,\n\tds_folder as string,\n\tdf_watermark_col as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:[(concat($ds_folder,'/*.parquet'))]) ~> source1\nsource1 derive(last_update_tmstp = currentUTC()) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tsource_table as string,\n\t\tdest_table as string,\n\t\tsource_path as string,\n\t\ttarget_path as string,\n\t\tflow_sequence as string,\n\t\trun_status as string,\n\t\tqstring as string,\n\t\twatermark_col as string,\n\t\twatermark_val as string,\n\t\tkey_column as string,\n\t\tsource_name as string,\n\t\tload_type as string,\n\t\tstart_run as string,\n\t\tsource_id as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:[(\" TRUNCATE TABLE {$df_schema}.{$df_table}\")],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_mgp_MiddleLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.0:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_mgp_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_mgp_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_mgp_20221012"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-12T12:26:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_mgp_BottomLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adls_synapse_all_tables_history_seq2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from ',pipeline().parameters.ctbl_schema,'.',pipeline().parameters.ctbl_name, ' where  trigger_segment= ''', pipeline().parameters.trigger_segment,''' and start_run=''Y'' and load_type =''', pipeline().parameters.p_load_type,''' and flow_sequence=2 and run_status =''N''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_synapse1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_adls_synapse_history",
											"type": "DataFlowReference",
											"parameters": {
												"df_schema": {
													"value": "'@{item().target_path}'",
													"type": "Expression"
												},
												"df_table": {
													"value": "'@{item().dest_table}'",
													"type": "Expression"
												},
												"ds_folder": {
													"value": "'@{item().source_path}'",
													"type": "Expression"
												},
												"df_watermark_col": {
													"value": "'@{item().watermark_col}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"ds_folder": {
														"value": "@item().source_path",
														"type": "Expression"
													},
													"ds_filename": {
														"value": "@concat(item().source_table,'.parquet')",
														"type": "Expression"
													},
													"ds_container": {
														"value": "@item().container",
														"type": "Expression"
													}
												},
												"sink1": {
													"ds_schema": {
														"value": "@item().target_path",
														"type": "Expression"
													},
													"ds_table": {
														"value": "@item().dest_table",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {
											"linkedService": {
												"referenceName": "AzureDataLakeStorage1",
												"type": "LinkedServiceReference"
											},
											"folderPath": {
												"value": "@item().container",
												"type": "Expression"
											}
										},
										"compute": {
											"coreCount": 48,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Stored procedure update run status true",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Data flow1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_true')",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"load_type": {
												"value": "history",
												"type": "String"
											},
											"t_sequence": {
												"value": "2",
												"type": "String"
											},
											"t_source_table": {
												"value": {
													"value": "@item().source_table",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSynapseAnalytics1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stored procedure update run status false",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Data flow1",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_false')",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"load_type": {
												"value": "history",
												"type": "String"
											},
											"t_sequence": {
												"value": "2",
												"type": "String"
											},
											"t_source_table": {
												"value": {
													"value": "@item().source_table",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSynapseAnalytics1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Stored procedure update run status true",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(item().watermark_col)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup max of watermark column",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlDWSource",
														"sqlReaderQuery": {
															"value": "@concat('select max(',item().watermark_col,') wm_value from ',item().target_path,'.',item().dest_table)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "ds_synapse1",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "update watermark in history fs 2 record",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Lookup max of watermark column",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.sp_update_wm_val')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"flow_sequence": {
															"value": "2",
															"type": "Int32"
														},
														"last_updt_date": {
															"value": {
																"value": "@utcnow()",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"load_type": {
															"value": "history",
															"type": "String"
														},
														"source_name": {
															"value": {
																"value": "@item().source_name",
																"type": "Expression"
															},
															"type": "String"
														},
														"source_table": {
															"value": {
																"value": "@item().dest_table",
																"type": "Expression"
															},
															"type": "String"
														},
														"watermarkval": {
															"value": {
																"value": "@activity('Lookup max of watermark column').output.firstRow.wm_value",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP update watermark in current fs 1 record",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "update watermark in history fs 2 record",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.sp_update_wm_val')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"flow_sequence": {
															"value": "1",
															"type": "Int32"
														},
														"last_updt_date": {
															"value": {
																"value": "@utcnow()",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"load_type": {
															"value": "current",
															"type": "String"
														},
														"source_name": {
															"value": {
																"value": "@item().source_name",
																"type": "Expression"
															},
															"type": "String"
														},
														"source_table": {
															"value": {
																"value": "@item().dest_table",
																"type": "Expression"
															},
															"type": "String"
														},
														"watermarkval": {
															"value": {
																"value": "@activity('Lookup max of watermark column').output.firstRow.wm_value",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ctbl_schema": {
						"type": "string"
					},
					"ctbl_name": {
						"type": "string"
					},
					"trigger_segment": {
						"type": "string"
					},
					"p_load_type": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Ingestion patterns Sql db to Synapse/History"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-11T03:50:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_adls_synapse_history')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adls_to_synapse_incremental_single_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from ',pipeline().parameters.ctbl_schema,'.adls_log_hist where tablename = ''',pipeline().parameters.p_source_table, ''' and processed = ''N'' order by last_modified_date ')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_synapse",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('prev_upsert'),'Y')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Data flow1",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "df_adls_synapse_current",
														"type": "DataFlowReference",
														"parameters": {
															"cols": {
																"value": "@pipeline().parameters.p_key_column",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"source1": {
																"ds_folder": {
																	"value": "@item().folder_path",
																	"type": "Expression"
																},
																"ds_filename": {
																	"value": "@item().filename",
																	"type": "Expression"
																},
																"ds_container": {
																	"value": "@item().container",
																	"type": "Expression"
																}
															},
															"sink1": {
																"ds_schema": {
																	"value": "@item().schema_name",
																	"type": "Expression"
																},
																"ds_table": {
																	"value": "@item().tablename",
																	"type": "Expression"
																}
															}
														}
													},
													"staging": {
														"linkedService": {
															"referenceName": "AzureDataLakeStorage1",
															"type": "LinkedServiceReference"
														},
														"folderPath": {
															"value": "@concat(item().container,'/tmp')",
															"type": "Expression"
														}
													},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "Stored procedure1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Data flow1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.sp_update_adls_load_hist')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"filename": {
															"value": {
																"value": "@item().filename",
																"type": "Expression"
															},
															"type": "String"
														},
														"folderpath": {
															"value": {
																"value": "@item().folder_path",
																"type": "Expression"
															},
															"type": "String"
														},
														"processed": {
															"value": "Y",
															"type": "String"
														},
														"processed_date": {
															"value": {
																"value": "@substring(utcnow(),0,19)",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"schemaname": {
															"value": {
																"value": "@item().schema_name",
																"type": "Expression"
															},
															"type": "String"
														},
														"tablename": {
															"value": {
																"value": "@item().tablename",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Data flow1",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "prev_upsert",
													"value": "N"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_source_table": {
						"type": "string",
						"defaultValue": "customers"
					},
					"p_key_column": {
						"type": "string",
						"defaultValue": "customerID"
					},
					"ctbl_schema": {
						"type": "string",
						"defaultValue": "sqldemo"
					}
				},
				"variables": {
					"prev_upsert": {
						"type": "String",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "Ingestion patterns Sql db to Synapse/Incremental"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-11T04:30:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_adls_synapse_current')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqldb_adls_all_tables_history_seq1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from ',pipeline().parameters.ctbl_schema,'.',pipeline().parameters.ctbl_name, ' where trigger_segment=''', pipeline().parameters.trigger_segment,''' and start_run=''Y'' and load_type =''', pipeline().parameters.p_load_type,''' and flow_sequence=1 and run_status =''N''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_db_any_table1",
								"type": "DatasetReference",
								"parameters": {
									"ds_schema": "schemaname",
									"ds_tablename": "table"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(item().partition_flag,'Y'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Pipeline1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pl_partition_sqldb_adls",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"schemaname": {
															"value": "@toUpper(item().source_path)",
															"type": "Expression"
														},
														"tablename": {
															"value": "@toUpper(item().source_table)",
															"type": "Expression"
														},
														"cntrl_table_his_grp_column": {
															"value": "@item().his_grp_column",
															"type": "Expression"
														},
														"cntrl_table_qstring": {
															"value": "@item().qstring",
															"type": "Expression"
														},
														"folder": {
															"value": "@item().target_path",
															"type": "Expression"
														},
														"filename": {
															"value": "@item().dest_table",
															"type": "Expression"
														},
														"watermark_where_cond": {
															"value": "@item().watermark_where_cond",
															"type": "Expression"
														},
														"container": {
															"value": "@item().container",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Stored procedure update run status true_copy1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Execute Pipeline1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_true')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"load_type": {
															"value": "history",
															"type": "String"
														},
														"t_sequence": {
															"value": "1",
															"type": "String"
														},
														"t_source_table": {
															"value": {
																"value": "@item().source_table",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Stored procedure update run status true_copy1_copy1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Execute Pipeline1",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_false')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"load_type": {
															"value": "history",
															"type": "String"
														},
														"t_sequence": {
															"value": "1",
															"type": "String"
														},
														"t_source_table": {
															"value": {
																"value": "@item().source_table",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_sql_db_any_table1",
														"type": "DatasetReference",
														"parameters": {
															"ds_schema": {
																"value": "\t\n@toUpper(item().source_path)",
																"type": "Expression"
															},
															"ds_tablename": {
																"value": "\t\n@toUpper(item().source_path)",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_adls_parquet_any_file14",
														"type": "DatasetReference",
														"parameters": {
															"ds_folder": {
																"value": "@item().target_path",
																"type": "Expression"
															},
															"ds_filename": {
																"value": "@concat(item().dest_table,'.parquet')",
																"type": "Expression"
															},
															"ds_container": {
																"value": "@item().container",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Stored procedure update run status true",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_true')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"load_type": {
															"value": "history",
															"type": "String"
														},
														"t_sequence": {
															"value": "1",
															"type": "String"
														},
														"t_source_table": {
															"value": {
																"value": "@item().source_table",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Stored procedure update run status false",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_false')",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"load_type": {
															"value": "history",
															"type": "String"
														},
														"t_sequence": {
															"value": "1",
															"type": "String"
														},
														"t_source_table": {
															"value": {
																"value": "@item().source_table",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSynapseAnalytics1",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ctbl_schema": {
						"type": "string",
						"defaultValue": "sqldemo"
					},
					"ctbl_name": {
						"type": "string",
						"defaultValue": "control_table"
					},
					"trigger_segment": {
						"type": "string",
						"defaultValue": "trigger1"
					},
					"p_load_type": {
						"type": "string",
						"defaultValue": "history"
					}
				},
				"folder": {
					"name": "Ingestion patterns Sql db to Synapse/History"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-11T03:59:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_partition_sqldb_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_mgp_TopLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDrivenCopyTask_mgp_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_mgp_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "dbo.MainControlTable_mgp"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_mgp_20221012"
				},
				"annotations": [
					"MetadataDrivenSolution"
				],
				"lastPublishTime": "2022-10-12T12:26:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_mgp_MiddleLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_adls_synapse_all_tables_incremental_seq2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from ',pipeline().parameters.ctbl_schema,'.',pipeline().parameters.ctbl_name, ' where  trigger_segment = ''', pipeline().parameters.p_trigger_schedule,''' and start_run=''Y'' and load_type =''current'' and flow_sequence=2 and run_status =''N''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_synapse",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_adls_to_synapse_incremental_single_table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_source_table": {
												"value": "@item().source_table",
												"type": "Expression"
											},
											"p_key_column": {
												"value": "@item().key_column",
												"type": "Expression"
											},
											"ctbl_schema": {
												"value": "@pipeline().parameters.ctbl_schema",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Stored procedure update run status true_copy1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Pipeline1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_true')",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"load_type": {
												"value": "current",
												"type": "String"
											},
											"t_sequence": {
												"value": "2",
												"type": "String"
											},
											"t_source_table": {
												"value": {
													"value": "@item().source_table",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSynapseAnalytics1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stored procedure update run status false",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Pipeline1",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@concat(pipeline().parameters.ctbl_schema,'.upd_run_status_false')",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"load_type": {
												"value": "current",
												"type": "String"
											},
											"t_sequence": {
												"value": "2",
												"type": "String"
											},
											"t_source_table": {
												"value": {
													"value": "@item().source_table",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSynapseAnalytics1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_trigger_schedule": {
						"type": "string"
					},
					"ctbl_schema": {
						"type": "string"
					},
					"ctbl_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Ingestion patterns Sql db to Synapse/Incremental"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-11T02:13:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_adls_to_synapse_incremental_single_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_end_to_end_history_sqldb_synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute sql db to ADLS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_sqldb_adls_all_tables_history_seq1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ctbl_schema": {
									"value": "@pipeline().parameters.ctbl_schema",
									"type": "Expression"
								},
								"ctbl_name": {
									"value": "@pipeline().parameters.ctbl_name",
									"type": "Expression"
								},
								"trigger_segment": {
									"value": "@pipeline().parameters.trigger_segment",
									"type": "Expression"
								},
								"p_load_type": {
									"value": "@pipeline().parameters.p_load_type",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute ADLS to Synapse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute sql db to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adls_synapse_all_tables_history_seq2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ctbl_schema": {
									"value": "@pipeline().parameters.ctbl_schema",
									"type": "Expression"
								},
								"ctbl_name": {
									"value": "@pipeline().parameters.ctbl_name",
									"type": "Expression"
								},
								"trigger_segment": {
									"value": "@pipeline().parameters.trigger_segment",
									"type": "Expression"
								},
								"p_load_type": {
									"value": "@pipeline().parameters.p_load_type",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ctbl_schema": {
						"type": "string",
						"defaultValue": "sqldemo"
					},
					"ctbl_name": {
						"type": "string",
						"defaultValue": "control_table"
					},
					"trigger_segment": {
						"type": "string",
						"defaultValue": "trigger1"
					},
					"p_load_type": {
						"type": "string",
						"defaultValue": "history"
					}
				},
				"folder": {
					"name": "Ingestion patterns Sql db to Synapse/History"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-11T02:04:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_sqldb_adls_all_tables_history_seq1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adls_synapse_all_tables_history_seq2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_end_to_end_inc_sqldb_synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute sql db to ADLS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_sqldb_adls_all_tables_incremental_seq1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_trigger_schedule": {
									"value": "@pipeline().parameters.p_trigger_schedule",
									"type": "Expression"
								},
								"ctbl_schema": {
									"value": "@pipeline().parameters.ctbl_schema",
									"type": "Expression"
								},
								"ctbl_name": {
									"value": "@pipeline().parameters.ctbl_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute ADLS to Synapse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute sql db to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_adls_synapse_all_tables_incremental_seq2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_trigger_schedule": {
									"value": "@pipeline().parameters.p_trigger_schedule",
									"type": "Expression"
								},
								"ctbl_schema": {
									"value": "@pipeline().parameters.ctbl_schema",
									"type": "Expression"
								},
								"ctbl_name": {
									"value": "@pipeline().parameters.ctbl_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_trigger_schedule": {
						"type": "string",
						"defaultValue": "trigger1"
					},
					"ctbl_schema": {
						"type": "string",
						"defaultValue": "sqldemo"
					},
					"ctbl_name": {
						"type": "string",
						"defaultValue": "control_table"
					}
				},
				"folder": {
					"name": "Ingestion patterns Sql db to Synapse/Incremental"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-11T02:11:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_sqldb_adls_all_tables_incremental_seq1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_adls_synapse_all_tables_incremental_seq2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_end_to_end_inc_sqldb_synapse",
							"type": "PipelineReference"
						},
						"parameters": {
							"p_trigger_schedule": "[parameters('trigger1_properties_pl_end_to_end_inc_sqldb_synapse_parameters_p_trigger_schedule')]",
							"ctbl_schema": "[parameters('trigger1_properties_pl_end_to_end_inc_sqldb_synapse_parameters_ctbl_schema')]",
							"ctbl_name": "[parameters('trigger1_properties_pl_end_to_end_inc_sqldb_synapse_parameters_ctbl_name')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 15,
						"startTime": "2022-10-13T09:08:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_end_to_end_inc_sqldb_synapse')]"
			]
		}
	]
}